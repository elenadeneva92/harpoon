#!/bin/bash
#
# pre-commit hook which verifies that changes are formatted w/ gofmt and pass
# go vet.

function checkfmt() {
  unformatted=$(gofmt -l $gofiles)
  [ -z "$unformatted" ] && return 0

  echo >&2 "Go files must be formatted with gofmt. Please run:"
  for fn in $unformatted; do
    echo >&2 "  gofmt -w $PWD/$fn"
  done

  return 1
}

function checkvet() {
  unvetted=$(go vet ./... 2>&1)
  [ -z "$unvetted" ] && return 0

  echo >&2 "Go files must be vetted. Check these problems:"
  IFS=$'\n'
  for line in $unvetted; do
    echo >&2 "  $line"
  done
  unset IFS

  return 1
}

# This check ensures that staged files must not have unstaged modifications.
#
# It addresses the following recurring issue:  The developer tries to commit.
# The pre-commit hook fails with an error.  The developer fixes the errors, but
# does not stage the new changes.  The developer now commits again.  The pre-commit
# hook checks the modified files on the filesystem. These are good, so the
# pre-commit hook succeeds.
#
# Git then commits the *staged* version of the files, and not the *modified* version
# of the files which were actaully checked, resulting in the orignal defective files
# being submitted.
#
# Turn on this check by setting the environment variable GIT_PRECOMMIT_CHECK_UNSTAGED.
function unstaged() {
  unstaged_modifications=$(git status --porcelain | awk '/^[AM]M/{print $2}')
  [ -z "$unstaged_modifications" ] && return 0

  echo >&2 "The following staged files have been modified and must be restaged:"
  local file
  for file in $unstaged_modifications; do
     echo >&2 "  $file"
  done

  return 1
}

# If there are no modified files, then there is nothing to check.
allfiles=$(git diff --cached --name-only --diff-filter=ACM)
[ -z "$allfiles" ] && exit 0

# Find all changed go files
gofiles=$(git diff --cached --name-only --diff-filter=ACM | grep '.go$')

if [ -n "$gofiles" ]; then
  checkfmt || fail=yes
  checkvet || fail=yes
fi

if [ -n "$GIT_PRECOMMIT_CHECK_UNSTAGED" ]; then
  unstaged || fail=yes
fi

[ -z "$fail" ] || exit 1

exit 0
